{
    "self.findBlockType(bot: bot, name: string, maxDistance: int)": "SEARCH for blocks of a certain type. The bot will respond with visible blocks of type 'name' within 32 blocks. Ex: self.findBlockType(bot, 'oak_log', 32) # will find an oak log within 32 blocks",
    "vision.visionModule(query: string)": "(EXPENSIVE) This function will screenshot the current view of the Bot and answer the query based on only what is in view. This function has ZERO ACCESS TO any information other than the SCREENSHOT PROVIDED by the bot. Ex: visionModule('Is there a desert up ahead?') # will view a screenshot of the bot's view and determine if there is a desert in the screenshot",
    "self.scanEnvironment(bot: bot, query: string)": "(VERY EXPENSIVE) This function will call the visionModule function and scan the area around the bot for a given query. Ex: self.scanEnvironment(bot, 'Is there a village nearby?') # will scan all four directions around the bot for a village and respond with the location of the village if it is found",
    "explore.exploreUntil(bot: bot, direction: Vec3(x,y,z), maxTime: int, timeout: int=500000)": "UTILIZE ONLY WHEN NO OPTIONS LEFT. The bot will walk in the direction of a Vec3 for a maximum of maxTime seconds. Important note on this one: the Vec3 values must be an integer in [-1,0,1]. Ex: explore.exploreUntil(bot, Vec3(1,0,-1), 15, timeout=500000) # will walk 1 block in the positive x direction and 1 block in the negative Z direction for a maximum of 15 seconds",
    "mem.query_memories(question: string)": "This function will answer a given question based on the bot's memory. It is important to note that the memory may be faulty, or the bot may not have the answer to the question. Ex: query_memories('Where was the village we saw earlier?') # will ask the bot where the nearest village is, and if the bot has seen a village, it will respond with the location of the village to the best of its ability",
    "self.askLLM(question: string)": "This function will ask a question to an LLM. The LLM has adequate knowledge of Minecraft, but it has no context about the world or environment. Ex: self.askLLM('What do I need to craft a bow?') # will ask the LLM what materials are needed for a bow, and it will respond with the materials needed like sticks and string"
}