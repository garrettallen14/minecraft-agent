Vec3 = require('vec3').Vec3
mineflayer = require('mineflayer')
pathfinder = require('mineflayer-pathfinder')
pvp = require('mineflayer-pvp').plugin
mcData = require('minecraft-data')(MINECRAFT_VERSION)
armorManager = require("mineflayer-armor-manager")
autoeat = require('mineflayer-auto-eat').plugin
collectblock = require('mineflayer-collectblock').plugin
hawkeye = require('minecrafthawkeye')
toolPlugin = require('mineflayer-tool').plugin
mineflayerViewer = require('prismarine-viewer').mineflayer

RANGE_GOAL = 1

# Load bot
def load_bot(username=None):
    # Create bot
    if not username:
        random_number = 176
    BOT_USERNAME = f'poo_bucket{random_number}'

    bot = mineflayer.createBot({ 
        'host': 'localhost',
        'port': 22222,
        'username': BOT_USERNAME, 
        'hideErrors': False 
    })

    # Load plugins
    bot.loadPlugin(collectblock)
    bot.loadPlugin(hawkeye)
    bot.loadPlugin(pathfinder.pathfinder)
    bot.loadPlugin(pvp)
    bot.loadPlugin(toolPlugin)

    globalThis.mcData = mcData
    globalThis.pathfinder = pathfinder
    movements = pathfinder.Movements(bot, mcData)
    bot.pathfinder.setMovements(movements)

    # Auto armor
    bot.loadPlugin(armorManager)
    bot.armorManager.equipAll()

    # Auto eat
    bot.loadPlugin(autoeat)
    bot.autoEat.options.priority = 'foodPoints'
    bot.autoEat.options.startAt = 14
    bot.autoEat.options.bannedFood.push('golden_apple')

    once(bot, 'login')
    mineflayerViewer(bot, { 'port': 3000, 'firstPerson': True })
    bot.chat('I spawned')

    @On(bot, 'chat')
    def handleMsg(this, sender, message, *args):
        if sender and (sender != bot.username):
            bot.chat('Hi, you said ' + message)
            if 'come' in message:
                player = bot.players[sender]
                target = player.entity
                if not target:
                    bot.chat("I don't see you !")
                    return
                pos = target.position
                bot.pathfinder.setMovements(movements)
                bot.pathfinder.setGoal(pathfinder.goals.GoalNear(pos.x, pos.y, pos.z, RANGE_GOAL))
            if 'stop' in message:
                off(bot, 'chat', handleMsg)

    return bot, movements