{
    "craft.craftItem(bot: bot, name: string, count: int, timeout=500000)": "The bot will craft the item 'name' and iterate this process count times. Ex: craft.craftItem(bot, 'stick', 1, timeout=500000) # will craft 4 sticks",
    "explore.exploreUntil(bot: bot, direction: Vec3(x,y,z), maxTime: int, timeout: int=500000)": "The bot will walk in the direction of a Vec3 for a maximum of maxTime seconds. Important note on this one: the Vec3 values must be an integer in [-1,0,1]. Ex: explore.exploreUntil(bot, Vec3(1,0,-1), 15, timeout=500000) # will walk 1 block in the positive x direction and 1 block in the negative Z direction for a maximum of 15 seconds",
    "move.gotoPosition(bot: bot, position: Vec3(x,y,z), timeout: int=500000)": "The bot will move to the Vec3 position it is provided. Ex: move.gotoPosition(bot, bot.entity.position.offset(10,0,0), timeout=5000000) # will move the bot 10 blocks in the positive x direction",
    "kill.killMob(bot: bot, mobName: string, timeout: int=500000)": "The bot will kill one entity within sight. Ex: kill.killMob(bot, 'zombie', timeout=500000) # will go kill a zombie if it sees it",
    "collectPosition.mineBlockPosition(bot: bot, position: Vec3(x,y,z), timeout: int=500000)": "The bot will mine and collect the block at the Vec3 position it is provided. Ex: collectPosition.mineBlockPosition(bot, Vec3(54,43,-72), timeout=500000) # will mine the block at position (54,43,-72)",
    "collectType.mineBlockType(bot: bot, name: string, count: int, timeout: int=500000)": "The bot will mine and collect count amount of blocks of type 'name' that it finds within 32 blocks of it. Important note: MUST be extremely detailed in choosing block name. MUST use the exact Minecraft item name. Ex: collectType.mineType(bot, 'oak_log', 5, timeout=500000) # will try to mine 5 oak_log blocks",
    "pickupDroppedItem.pickupDroppedItem(bot: bot, name: string, timeout: int=500000)": "ONLY USE IF A DROPPED ITEM EXISTS IN THE ENVIRONMENT... The bot will pick up one name='DroppedItem' within maxDistance=32 blocks. Important note: if the dropped item is nonexistent, then this will do nothing. Ex: pickupDroppedItem.pickupDroppedItem(bot, 'Oak Log', timeout=500000) # will pick up the oak log item which was dropped",
    "place.placeItem(bot: bot, name: string, position: Vec3(x,y,z), timeout: int=500000)": "The bot will try to place the block of type 'name' at the Vec3 position it is provided. Ex: place.placeItem(bot, 'crafting_table', Vec3(33,62,1112), timeout=500000) # will place a crafting table at position (33,62,1112)",
    "shoot.shoot(bot: bot, weapon: string, target: string, timeout: int=500000)": "The bot will shoot the target with the weapon. Ex: shoot.shoot(bot, 'bow', 'skeleton', timeout=500000) # will shoot the skeleton with a bow",
    "smelt.smeltItem(bot: bot, itemName: string, fuelName: string, count: int, timeout: int=500000)": "The bot will smelt the item and iterate this process count times. Ex: smelt.smeltItem(bot, 'iron_ore', 'coal', 1, timeout=500000) # will smelt 1 iron ore with a piece of coal",
    "chest.getItemFromChest(bot: bot, chestPos: Vec3(x,y,z), itemsToGet: list(strings), count: list(ints), timeout: int=500000)": "The bot will withdraw the items from the chest at the Vec3 position it is provided. Important note on this one: the itemsToGet must be a list of strings, and the count must be a list of the corresponding numbers you would like to withdraw of each. Ex: chest.getItemFromChest(bot, Vec3(123.522,66.577,-12.6999), ['oak_log', 'sand'], [15, 23], timeout=500000) # will get 15 oak logs and 23 sand from the chest at position (123.522,66.577,-12.6999)",
    "chest.depositItemIntoChest(bot: bot, chestPos: Vec3(x,y,z), itemsToDeposit: list(strings), count: list(ints), timeout: int=500000)": "The bot will deposit the items into the chest at the Vec3 position it is provided. Important note on this one: the itemsToDeposit must be a list of strings, and the count must be a list of the corresponding numbers you would like to deposit of each. Ex: chest.depositItemIntoChest(bot, Vec3(92.33233,69.4111,2034.6999), ['lime_wool', 'stripped_jungle_wood', 'shroomlight', 'torch'], [64, 31, 10, 59], timeout=500000) # will deposit 64 lime wool, 31 stripped jungle wood, 10 shroomlight, and 59 torches into the chest at position (92.33233,69.4111,2034.6999)",
    "bot.sleep(bedBlock: bot.blockAt(Vec3(x,y,z)))": "The bot will sleep in the bed at the Vec3 position it is provided. Ex: bot.sleep(bedBlock=bot.blockAt(Vec3(123,64,123)), timeout=500000) # will sleep in the bed at position (123,64,123). Timeout is unnecessary.",
    "bot.chat(message: string)": "The bot will send the message in the chat. Ex: bot.chat('Hello!') # will send 'Hello!' in the chat",
    "build.generateStructurePlans(bot: bot, desired_structure: string, timeout: int=500000)": "The bot will generate a plan to build the desired structure. Ex: build.generateStructurePlans(bot, 'A quaint plains village home.', timeout=500000) # will generate a plan to build a quaint home in the plains.",
    "build.executeStructurePlans(bot: bot, plans: string, orienting_position: Vec3(x,y,z), timeout: int=500000)": "The bot will execute the plans it has generated to build the desired structure. Ex: build.executeStructurePlans(bot, str(build.generateStructurePlans), orienting_position: Vec3(x,y,z), timeout: int=500000) # will execute the plans to build the structure"
}